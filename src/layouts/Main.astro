---
import Breadcrumbs from "@components/Breadcrumbs.astro";
import CollectionFilters from "@components/CollectionFilters.astro";
import { Image } from "astro:assets";
import type { EventItem, Organizer } from "../content/config";

interface StringTitleProp {
  pageTitle: string;
  pageDesc?: string;
  neighborhoods?: string[];
  hideFilters?: boolean;
  eventDetails?: EventItem;
  organizer?: Organizer;
}

interface ArrayTitleProp {
  pageTitle: [string, string];
  titleTransition: string;
  pageDesc?: string;
  neighborhoods?: string[];
  hideFilters?: boolean;
  eventDetails?: EventItem;
  organizer?: Organizer;
}

export type Props = StringTitleProp | ArrayTitleProp;

const { props } = Astro;
const { mapUrl, dateStart, dateEnd } = props.eventDetails || {};
const { logo, url, name, description } = props.organizer || {};

const badgeVariantByStatus = {
  Past: "danger",
  Upcoming: "brand",
  Active: "success",
};

// check if the event is in the past, present, or future
let eventStatus: keyof typeof badgeVariantByStatus = "Past";
const hasStartAndEnd = dateStart && dateEnd;

if (hasStartAndEnd) {
  if (new Date(dateEnd) < new Date()) {
    eventStatus = "Past";
  } else if (new Date(dateStart) > new Date()) {
    eventStatus = "Upcoming";
  } else {
    eventStatus = "Active";
  }
}
---

<Breadcrumbs />

<main id="main-content" class="flex flex-col gap-4">
  <div class="flex gap-8 items-start flex-col lg:flex-row">
    <div class="w-full">
      {
        "titleTransition" in props ? (
          <h1>
            {props.pageTitle[0]}
            <span transition:name={props.titleTransition}>
              {props.pageTitle[1]}
            </span>
          </h1>
        ) : (
          <div class="flex gap-4 items-center">
            <h1>{props.pageTitle}</h1>
            {!props.hideFilters && (
              <wa-badge
                variant={badgeVariantByStatus[eventStatus]}
                appearance="filled outlined"
              >
                {eventStatus}
              </wa-badge>
            )}
          </div>
        )
      }
      <p>{props.pageDesc}</p>
      <div class="flex flex-col gap-2">
        {
          logo && typeof logo === "string" && (
            <div class="logo-container flex justify-center items-center">
              <div class="aspect-[4/1] w-full max-w-[400px]">
                <Image
                  src={logo}
                  alt={name || ""}
                  width={400}
                  height={100}
                  id="logo-image"
                  class="w-full h-full object-contain"
                  sizes="(max-width: 768px) 128px, 200px"
                  loading="eager"
                />
              </div>
            </div>
          )
        }
        {url && <a href={url}>{name}</a>}
        {description && <p>{description}</p>}
      </div>
    </div>
    <div class="w-full">
      {
        mapUrl && (
          <div class="aspect-[4/3] w-full bg-base-200">
            <iframe
              src={mapUrl}
              width="100%"
              height="100%"
              style="border: 0"
              allowfullscreen=""
              loading="lazy"
              referrerpolicy="no-referrer-when-downgrade"
              class="w-full h-full rounded-lg"
            />
          </div>
        )
      }
    </div>
  </div>
  <div class="w-full flex justify-start">
    {
      !props.hideFilters ? (
        <CollectionFilters neighborhoods={props.neighborhoods} />
      ) : null
    }
  </div>
  <slot />
</main>

<script>
  // prevent layout shifts during logo loading
  document.addEventListener("DOMContentLoaded", function () {
    const logoImage = document.getElementById("logo-image");
    if (logoImage) {
      const logoContainer = logoImage.closest(".logo-container");

      if (logoContainer) {
        // add loaded state immediately if image is already loaded
        if (logoImage instanceof HTMLImageElement && logoImage.complete) {
          logoContainer.classList.add("logo-loaded");
        } else {
          // add loaded state when image loads
          logoImage.addEventListener("load", () => {
            logoContainer.classList.add("logo-loaded");
          });
          logoImage.addEventListener("error", () => {
            logoContainer.classList.add("logo-loaded");
          });
        }
      }
    }
  });
</script>

<style>
  #main-content {
    @apply mx-auto w-full max-w-6xl px-4 pb-4;
  }
  #main-content h1 {
    @apply text-2xl font-semibold sm:text-3xl;
  }
  #main-content p {
    @apply mb-6 mt-2 italic;
  }
  .logo-container {
    @apply p-4 rounded-lg;
  }

  /* ensure logo image is properly contained */
  .logo-container img {
    opacity: 1;
    transition: opacity 0.3s ease-in;
  }

  .logo-loaded .logo-container img {
    opacity: 1;
  }
</style>
