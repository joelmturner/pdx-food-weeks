---
import { Image } from "astro:assets";
import type { ListItem } from "types";
import SaveToList from "./SaveToList.svelte";
import type { FoodItem } from "@content/config";

type Props = FoodItem & { lists: ListItem[] | null };
const {
  id,
  url,
  imageUrl,
  title,
  locationUrl,
  location,
  hours,
  description,
  neighborhood,
  diet,
  lists,
  mapUrl,
} = Astro.props;

const dietaryOptions = diet?.join(",");
const neighborhoodOptions = neighborhood?.join(",");

const schema = {
  "@context": "https://schema.org",
  "@type": "Restaurant",
  name: location,
  url: locationUrl,
  image: imageUrl,
  description: description,
  address: {
    "@type": "PostalAddress",
    addressLocality: "Portland",
    addressRegion: "OR",
    addressCountry: "US",
    addressNeighborhood: neighborhood?.join(", "),
  },
  servesCuisine: "American",
  menu: {
    "@type": "MenuItem",
    name: title,
    description: description,
    url: url,
    ...(diet && {
      suitableForDiet: diet
        .map(option =>
          option === "vegan"
            ? "VeganDiet"
            : option === "vegetarian"
              ? "VegetarianDiet"
              : "None"
        )
        .filter(diet => diet !== "None"),
    }),
  },
  ...(hours && { openingHours: hours }),
};
---

<div
  class="card grid-item bg-neutral overflow-hidden"
  data-dietary={dietaryOptions}
  data-neighborhood={neighborhoodOptions}
>
  <script type="application/ld+json" set:html={JSON.stringify(schema)} />
  <a href={url} target="_blank" rel="nofollow noopener noreferrer">
    <Image
      src={imageUrl}
      alt={title}
      width="400"
      height="400"
      widths={[341, 384, 400]}
      sizes="(min-width: 1024px) 33.33vw, (min-width: 768px) 50vw, 100vw"
      loading="lazy"
      class="w-full h-auto aspect-square object-cover object-center"
    />
  </a>
  <div class="card-body flex flex-col gap-2 p-4">
    <div class="flex flex-col gap-0">
      <h3 class="card-title text-accent">
        <a href={url} target="_blank" rel="nofollow noopener noreferrer">
          {title}
        </a>
      </h3>

      <div class="flex items-center gap-3">
        <h3
          class="text-neutral-content w-full text-l font-semibold tracking-wide"
        >
          <a
            href={mapUrl ? mapUrl : locationUrl}
            target="_blank"
            rel="nofollow noopener noreferrer"
          >
            {location}
          </a>
        </h3>
        {
          hours ? (
            <div class="tooltip tooltip-left" data-tip={hours}>
              <p class="text-neutral-content link">Hours</p>
            </div>
          ) : null
        }
      </div>
    </div>

    <div class="description-container">
      <p
        class="text-neutral-content description-text"
        data-full-text={description}
      >
        {
          description.length > 150
            ? description.slice(0, 150) + "..."
            : description
        }
      </p>
      {
        description.length > 150 && (
          <button
            class="text-accent hover:text-accent-focus text-sm font-medium cursor-pointer description-toggle"
            data-description-id={id}
          >
            Read more
          </button>
        )
      }
    </div>

    <div class="justify-between text-sm">
      {
        neighborhood?.length ? (
          <div class="md:gap-2 lg:gap3 flex gap-1">
            <div class="text-neutral-content">Neighborhood:</div>
            {neighborhood.map(item => (
              <div class="text-neutral-content">{item}</div>
            ))}
          </div>
        ) : null
      }

      {
        diet?.length ? (
          <div class="md:gap-2 lg:gap3 flex gap-1">
            <div class="text-neutral-content">Dietary Options:</div>
            <div class="text-neutral-content">{diet?.join(", ")}</div>
          </div>
        ) : null
      }
    </div>

    {
      Astro.locals.user && lists ? (
        <div>
          <SaveToList client:load foodId={id} lists={lists} />
        </div>
      ) : null
    }
  </div>

  <style>
    .tooltip::before {
      @apply max-w-60 border p-2;
    }

    .description-container {
      @apply flex flex-col gap-1;
    }

    .description-text {
      @apply leading-relaxed;
    }

    .description-toggle {
      @apply self-start transition-colors duration-200;
    }
  </style>
</div>

<script>
  // add event listeners to all description toggle buttons
  document.addEventListener("DOMContentLoaded", function () {
    document.addEventListener("click", function (e) {
      if (
        e.target instanceof HTMLElement &&
        e.target.classList.contains("description-toggle")
      ) {
        const button = e.target;
        const descriptionText = button.previousElementSibling;

        // check if descriptionText exists and has the required properties
        if (!descriptionText || !(descriptionText instanceof HTMLElement)) {
          return;
        }

        const fullText = descriptionText.dataset.fullText;
        if (!fullText) {
          return;
        }

        const isExpanded = descriptionText.dataset.expanded === "true";

        if (isExpanded) {
          // collapse
          descriptionText.textContent = fullText.slice(0, 150) + "...";
          descriptionText.dataset.expanded = "false";
          button.textContent = "Read more";
        } else {
          // expand
          descriptionText.textContent = fullText;
          descriptionText.dataset.expanded = "true";
          button.textContent = "Show less";
        }
      }
    });
  });
</script>
