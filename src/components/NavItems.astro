---
import { getYearsFromAllEvents } from "@utils/collections";

const collectionNavItems = await getYearsFromAllEvents();

type Props = {
  activeNav?: string;
  type?: "desktop" | "mobile";
};

const user = Astro.locals.user;
const { type } = Astro.props;

// get current query parameters
const searchParams = new URLSearchParams(Astro.url.search);
const hasQueryParams = searchParams.toString().length > 0;
---

<div class="flex flex-col md:flex-row md:items-center gap-1 w-full">
  {
    type === "mobile" ? (
      <div class="mobile-nav-collection md:hidden w-full wa-body-xl">
        {collectionNavItems.map(item => (
          <wa-details summary={item.name} class="w-full" appearance="plain">
            <div class="flex flex-col gap-2 wa-body-l">
              {item.years.map(year => (
                <wa-dropdown-item value={`${item.slug}/${year}`} class="">
                  <a
                    href={`/${item.slug}/${year}${hasQueryParams ? `?${searchParams.toString()}` : ""}`}
                    class="nav-link"
                  >
                    {year}
                  </a>
                </wa-dropdown-item>
              ))}
            </div>
          </wa-details>
        ))}
      </div>
    ) : (
      <div class="hidden md:flex items-center gap-1">
        {collectionNavItems.map(item => (
          <wa-dropdown>
            <wa-button slot="trigger" caret appearance="plain" size="small">
              <div class="text-lg capitalize">{item.name}</div>
            </wa-button>
            <div class="flex flex-col gap-2 w-full pt-2 bg-base-100 border border-base-300">
              {item?.years?.map(year => (
                <wa-dropdown-item
                  value={`${item.slug}/${year}`}
                  class="w-full p-0 h-8 wa-body-m hover:text-inherit hover:no-underline nav-link hover:bg-base-300"
                >
                  <a
                    class="w-full py-2 px-8"
                    href={`/${item.slug}/${year}${hasQueryParams ? `?${searchParams.toString()}` : ""}`}
                  >
                    {year}
                  </a>
                </wa-dropdown-item>
              ))}
            </div>
          </wa-dropdown>
        ))}
      </div>
    )
  }

  <wa-button
    id="theme-btn"
    class="focus-outline justify-start md:justify-center"
    title="Toggles light & dark"
    aria-label="auto"
    aria-live="polite"
    appearance="plain"
    ><svg xmlns="http://www.w3.org/2000/svg" id="moon-svg">
      <path
        d="M20.742 13.045a8.088 8.088 0 0 1-2.077.271c-2.135 0-4.14-.83-5.646-2.336a8.025 8.025 0 0 1-2.064-7.723A1 1 0 0 0 9.73 2.034a10.014 10.014 0 0 0-4.489 2.582c-3.898 3.898-3.898 10.243 0 14.143a9.937 9.937 0 0 0 7.072 2.93 9.93 9.93 0 0 0 7.07-2.929 10.007 10.007 0 0 0 2.583-4.491 1.001 1.001 0 0 0-1.224-1.224zm-2.772 4.301a7.947 7.947 0 0 1-5.656 2.343 7.953 7.953 0 0 1-5.658-2.344c-3.118-3.119-3.118-8.195 0-11.314a7.923 7.923 0 0 1 2.06-1.483 10.027 10.027 0 0 0 2.89 7.848 9.972 9.972 0 0 0 7.848 2.891 8.036 8.036 0 0 1-1.484 2.059z"
      ></path>
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" id="sun-svg">
      <path
        d="M6.993 12c0 2.761 2.246 5.007 5.007 5.007s5.007-2.246 5.007-5.007S14.761 6.993 12 6.993 6.993 9.239 6.993 12zM12 8.993c1.658 0 3.007 1.349 3.007 3.007S13.658 15.007 12 15.007 8.993 13.658 8.993 12 10.342 8.993 12 8.993zM10.998 19h2v3h-2zm0-17h2v3h-2zm-9 9h3v2h-3zm17 0h3v2h-3zM4.219 18.363l2.12-2.122 1.415 1.414-2.12 2.122zM16.24 6.344l2.122-2.122 1.414 1.414-2.122 2.122zM6.342 7.759 4.22 5.637l1.415-1.414 2.12 2.122zm13.434 10.605-1.414 1.414-2.122-2.122 1.414-1.414z"
      ></path>
    </svg></wa-button
  >

  {
    user ? (
      <>
        <wa-dropdown>
          <wa-button slot="trigger" caret appearance="plain">
            <wa-avatar label="User" initials={user.username?.[0]} />
          </wa-button>

          <wa-dropdown-item value="my-lists" class="p-0">
            <a
              class="w-full wa-body-m hover:text-inherit hover:no-underline flex items-center gap-2 px-4 py-2"
              href={`/me`}
            >
              <wa-icon slot="icon" name="list" />
              My Lists
            </a>
          </wa-dropdown-item>
          <wa-dropdown-item value="logout" class="p-0">
            <a
              href="#"
              class="w-full wa-body-m hover:text-inherit hover:no-underline flex items-center gap-2 px-4 py-2"
              id="logout-link"
            >
              <wa-icon slot="icon" name="right-from-bracket" />
              Logout
            </a>
          </wa-dropdown-item>
        </wa-dropdown>
      </>
    ) : type === "mobile" ? (
      <wa-button
        appearance="plain"
        class="justify-start md:justify-center wa-body-xl"
      >
        <a href="/login" class="wa-body-xl">
          Login
        </a>{" "}
        <a href="/signup" class="wa-body-xl">
          / Sign Up
        </a>
      </wa-button>
    ) : (
      <wa-button
        appearance="plain"
        class="justify-start md:justify-center wa-body-m"
      >
        <a href="/login" class="wa-body-m">
          Login
        </a>{" "}
        <a href="/signup" class="wa-body-m">
          / Sign Up
        </a>
      </wa-button>
    )
  }
</div>

<script>
  const container = document.querySelector(".mobile-nav-collection");

  // close all other details when one is shown
  container?.addEventListener("wa-show", event => {
    if (
      event.target instanceof HTMLElement &&
      event.target.localName === "wa-details"
    ) {
      [...(container?.querySelectorAll("wa-details") || [])].map(details => {
        // @ts-ignore-next-line
        return (details.open = event.target === details);
      });
    }
  });

  // update navigation links when URL changes
  window.addEventListener("url-changed", event => {
    // @ts-ignore
    const url = new URL(event.detail.url);
    const searchParams = url.search;

    // update all navigation links
    document.querySelectorAll(".nav-link").forEach(link => {
      if (link instanceof HTMLAnchorElement) {
        const baseUrl = link.href.split("?")[0];
        link.href = baseUrl + (searchParams ? searchParams : "");
      }
    });
  });

  // handle logout
  document.getElementById("logout-link")?.addEventListener("click", event => {
    event.preventDefault();
    fetch("/api/logout", { method: "POST" })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          window.location.href = "/";
        } else {
          console.error("Logout failed:", data.message);
        }
      })
      .catch(error => {
        console.error("Logout error:", error);
      });
  });
</script>

<style>
  wa-button,
  wa-details {
    width: 100%;
  }
  wa-avatar {
    --size: 1.5rem;
  }
</style>
