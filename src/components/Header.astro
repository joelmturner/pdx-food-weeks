---
import Hr from "./Hr.astro";
import NavItems from "./NavItems.astro";
import { Image } from "astro:assets";
import logo from "@assets/images/FoodWeeksLogo.png";

export interface Props {
  activeNav?: "burgers" | "nachos" | "about" | "sandwich" | "admin";
}

const { activeNav } = Astro.props;
---

<header class="z-10">
  <a id="skip-to-content" href="#main-content">Skip to content</a>
  <div class="text-base-content">
    <div class="navbar max-w-6xl mx-auto">
      <div class="flex-1">
        <a class="text-xl" href="/">
          <div class="h-20 w-32 flex items-center justify-center bg-base-200">
            <div
              class="logo-skeleton w-20 h-16 bg-base-300 rounded animate-pulse"
            >
            </div>
            <Image
              src={logo}
              alt="PDX Food Weeks neon glow Logo"
              width="128"
              height="80"
              class="light:bg-slate-900 dark:bg-transparent max-w-full max-h-full object-contain absolute"
              data-id="logo"
              onload="this.parentElement.classList.add('logo-loaded')"
              sizes="(max-width: 768px) 128px, 200px"
              loading="eager"
            />
          </div>
        </a>
      </div>

      <div class="flex-none md:block hidden">
        <NavItems activeNav={activeNav} type="desktop" />
      </div>

      <div class="flex-none md:hidden w-16 h-16">
        <wa-drawer with-header class="drawer-header">
          <NavItems activeNav={activeNav} type="mobile" />
        </wa-drawer>
        <wa-button
          appearance="plain"
          aria-label="Open navigation"
          class="w-16 h-16 flex items-center justify-center"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            class="inline-block w-6 h-6 stroke-current"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path></svg
          >
        </wa-button>

        <!-- fallback mobile navigation in case WebAwesome fails -->
        <div class="webawesome-fallback hidden">
          <button
            class="btn btn-ghost w-16 h-16 flex items-center justify-center"
            aria-label="Open navigation"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              class="inline-block w-6 h-6 stroke-current"
              ><path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16M4 18h16"></path></svg
            >
          </button>
        </div>
      </div>
    </div>
  </div>
  <Hr exclude={{ top: true }} />
</header>

<script>
  function setupDrawer() {
    const drawer = document.querySelector(".drawer-header");
    const openButton = drawer?.nextElementSibling;
    const fallbackButton = document.querySelector(
      ".webawesome-fallback button"
    );

    // setup WebAwesome drawer
    if (openButton instanceof HTMLElement && drawer) {
      openButton.addEventListener("click", () => {
        // @ts-ignore-next-line
        if (drawer) {
          // @ts-ignore-next-line
          drawer.open = true;
        }
      });
    }

    // setup fallback navigation
    if (fallbackButton) {
      fallbackButton.addEventListener("click", () => {
        console.log("Fallback button clicked");
        // show mobile navigation in a simple way
        const mobileNav = document.querySelector(".md\\:hidden .drawer-header");
        if (mobileNav) {
          mobileNav.classList.toggle("hidden");
        }
      });
    }
  }

  // prevent header layout shifts during WebAwesome component loading
  function stabilizeHeader() {
    const header = document.querySelector("header");
    if (header) {
      header.classList.add("header-stable");
    }
  }

  // wait for WebAwesome components to be defined
  function waitForWebAwesome() {
    if (customElements.get("wa-button") && customElements.get("wa-drawer")) {
      setupDrawer();
      stabilizeHeader();
    } else {
      setTimeout(waitForWebAwesome, 100);
    }
  }

  // check if WebAwesome failed to load after a timeout
  function checkWebAwesomeFallback() {
    setTimeout(() => {
      if (
        !customElements.get("wa-button") ||
        !customElements.get("wa-drawer")
      ) {
        const fallback = document.querySelector(".webawesome-fallback");
        const webawesomeNav = document.querySelector(
          ".md\\:hidden wa-button, .md\\:hidden wa-drawer"
        );

        if (fallback && webawesomeNav) {
          fallback.classList.remove("hidden");
          // @ts-ignore-next-line
          webawesomeNav.style.display = "none";
        }
      }
    }, 3000); // wait 3 seconds for WebAwesome to load
  }

  // initial setup
  waitForWebAwesome();
  checkWebAwesomeFallback();

  // re-setup after navigation
  document.addEventListener("astro:after-swap", () => {
    waitForWebAwesome();
    checkWebAwesomeFallback();
  });

  // ensure header is stable after WebAwesome components load
  document.addEventListener("DOMContentLoaded", () => {
    waitForWebAwesome();
    checkWebAwesomeFallback();
  });
</script>

<style>
  #skip-to-content {
    @apply absolute -top-full left-16 z-50 bg-accent px-3 py-2 text-base-100 transition-all focus:top-4;
  }
  wa-drawer::part(close-button) {
    @apply text-2xl;
  }
</style>
