---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Main from "@layouts/Main.astro";
import Footer from "@components/Footer.astro";
import CardGrid from "@components/CardGrid.astro";
import {
  formatter,
  getEventDetails,
  getFoodItemsByTypeAndYear,
  getLists,
  getOrganizer,
  getUniqueNeighborhoods,
} from "@utils/collections";
import type { FoodItem } from "@content/config";
import { FOOD_TYPES } from "../../constants";

const { foodType, year } = Astro.params;

const validFoodTypes = FOOD_TYPES;
if (!validFoodTypes.includes(foodType! as FoodItem["type"])) {
  return Astro.redirect("/404");
}

const items = await getFoodItemsByTypeAndYear(foodType!, year!);
const neighborhoods = items ? getUniqueNeighborhoods(items) : [];
const lists = await getLists(Astro.locals?.user?.id);
const eventDetails = await getEventDetails(
  Number(year),
  foodType! as FoodItem["type"]
);
const organizer = await getOrganizer(eventDetails?.organizer);

const dateRange = eventDetails
  ? `${formatter.format(new Date(eventDetails.dateStart))} - ${formatter.format(new Date(eventDetails.dateEnd))} ${eventDetails.year}`
  : undefined;

const foodTypeCapitalized =
  foodType!.charAt(0).toUpperCase() + foodType!.slice(1);
const foodTypePlural =
  foodType === "sandwich" ? "Sandwich" : `${foodTypeCapitalized}s`;

// SEO optimized content
const pageTitle = `Portland ${foodTypeCapitalized} Week ${year} - PDX Food Weeks`;
const description = `Explore Portland ${foodTypeCapitalized} Week ${year}! ${items.length} unique ${foodTypePlural.toLowerCase()} across ${neighborhoods.length} Portland neighborhoods. ${dateRange ? `Running ${dateRange}` : ""}`;
// calculate event status based on dates
let eventStatus = "EventScheduled";
if (eventDetails) {
  const now = new Date();
  const startDate = new Date(eventDetails.dateStart);
  const endDate = new Date(eventDetails.dateEnd);

  if (endDate < now) {
    eventStatus = "EventCancelled";
  } else if (startDate > now) {
    eventStatus = "EventScheduled";
  } else {
    eventStatus = "EventPostponed";
  }
}

// extract pricing information from description
let offers = null;
if (eventDetails?.description) {
  const priceMatches = eventDetails.description.match(/\$(\d+)/g);
  if (priceMatches) {
    const prices = priceMatches.map(price => price.replace("$", ""));
    offers = {
      "@type": "Offer",
      price: Math.min(...prices.map(p => parseInt(p))),
      priceCurrency: "USD",
      availability: "https://schema.org/InStock",
      validFrom: eventDetails.dateStart,
      validThrough: eventDetails.dateEnd,
    };
  }
}

const schema = {
  "@context": "https://schema.org",
  "@type": "Event",
  name: `Portland ${foodTypeCapitalized} Week ${year}`,
  description: description,
  eventStatus: eventStatus,
  ...(eventDetails && {
    startDate: eventDetails.dateStart,
    endDate: eventDetails.dateEnd,
    image: eventDetails.ogImage || organizer?.logo,
    ...(organizer && {
      organizer: {
        "@type": "Organization",
        name: organizer.name,
        description: organizer.description,
        logo: organizer.logo,
        url: organizer.url,
      },
    }),
    ...(offers && { offers }),
  }),
  location: {
    "@type": "City",
    name: "Portland",
    address: {
      "@type": "PostalAddress",
      addressLocality: "Portland",
      addressRegion: "OR",
      addressCountry: "US",
    },
  },
};
---

<Layout
  title={pageTitle}
  description={description}
  ogImage={eventDetails?.ogImage}
>
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify(schema)}
  />
  <Header />
  <Main
    pageTitle={`${foodTypePlural} ${year}`}
    neighborhoods={neighborhoods}
    pageDesc={dateRange}
    eventDetails={eventDetails}
    organizer={organizer}
  >
    {
      items?.length > 0 ? (
        <CardGrid items={items} lists={lists} />
      ) : (
        <>
          <wa-divider />
          <div class="flex flex-col gap-2">
            <p>No items found for this event yet, check back later!</p>
          </div>
        </>
      )
    }
  </Main>
  <Footer />
</Layout>
